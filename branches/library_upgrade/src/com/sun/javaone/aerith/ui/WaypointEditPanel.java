/*
 * WaypointEditPanel.java
 *
 * Created on April 2, 2006, 1:18 AM
 */

package com.sun.javaone.aerith.ui;

import java.awt.Color;
import java.awt.Container;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.text.DecimalFormat;
import javax.imageio.ImageIO;
import javax.swing.AbstractListModel;
import javax.swing.JComponent;
import javax.swing.TransferHandler;

import com.sun.javaone.aerith.g2d.AnimationUtil;
import com.sun.javaone.aerith.model.Trip;
import com.sun.javaone.aerith.ui.GradientViewport.Orientation;
import com.sun.javaone.aerith.ui.plaf.AerithScrollbarUI;
import org.jdesktop.animation.timing.Animator;
import org.jdesktop.animation.timing.TimingTarget;
import org.jdesktop.swingx.JXPanel;

/**
 *
 * @author  jm158417
 */
public class WaypointEditPanel extends JXPanel {
    private Trip.Waypoint waypoint;
    private static final Rectangle DELETE_ICON_BOUNDS = new Rectangle(40, 5, 11, 11);
    private static final DecimalFormat format = new DecimalFormat("##.00000");
    
    /** Creates new form WaypointEditPanel */
    public WaypointEditPanel() {
        initComponents();
        //Component view = jScrollPane2.getViewport().getView();
        //jScrollPane2.setViewport(new GradientViewport(new Color(255,255,255,255)));
        //jScrollPane2.getViewport().setView(view);
        jScrollPane2.setOpaque(false);
        jScrollPane2.getViewport().setOpaque(false);
        jScrollPane2.getHorizontalScrollBar().setUI(new AerithScrollbarUI());
        
    }
    
    public void setWaypoint(Trip.Waypoint waypoint) {
        this.waypoint = waypoint;
        this.name.setText(waypoint.getName());
        this.title.setText(waypoint.getTitle());
        this.summary.setText(waypoint.getSummary());
        this.geoposition.setText(
                format.format(waypoint.getPosition().getLatitude()) +
                ", " +
                format.format(waypoint.getPosition().getLongitude()));
        photos.setTransferHandler(new PhotoImportHandler());
        
        photos.setModel(new PhotoListModel(waypoint));
        photos.setCellRenderer(new WaypointPhotoListCellRenderer());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        javax.swing.JLabel jLabel1;
        javax.swing.JLabel jLabel2;
        javax.swing.JLabel jLabel3;
        javax.swing.JLabel jLabel5;
        javax.swing.JLabel jLabel6;
        javax.swing.JScrollPane jScrollPane1;

        aerithPanelPainter1 = new com.sun.javaone.aerith.ui.AerithPanelPainter();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        geoposition = new javax.swing.JLabel();
        title = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        summary = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane2.setViewport(new DropMe());
        photos = new javax.swing.JList();

        setBackground(new java.awt.Color(0, 0, 0));
        setBackgroundPainter(aerithPanelPainter1);
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Edit Waypoint");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Title:");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("Location:");

        geoposition.setForeground(new java.awt.Color(255, 255, 255));
        geoposition.setText("40.348, -74.569");

        title.setFont(new java.awt.Font("Tahoma", 1, 11));
        title.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));

        jScrollPane1.setBorder(null);
        summary.setColumns(20);
        summary.setFont(new java.awt.Font("Tahoma", 1, 11));
        summary.setLineWrap(true);
        summary.setRows(3);
        summary.setWrapStyleWord(true);
        jScrollPane1.setViewportView(summary);

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Summary:");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/photos/button-close.png")));
        jButton1.setToolTipText("Close editor");
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setFocusPainted(false);
        jButton1.setFocusable(false);
        jButton1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton1.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/photos/button-close-pressed.png")));
        jButton1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/photos/button-close-over.png")));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Name:");

        name.setFont(new java.awt.Font("Tahoma", 1, 11));
        name.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));

        jScrollPane2.setBorder(null);
        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        photos.setBackground(new java.awt.Color(0, 0, 0));
        photos.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        photos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        photos.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        photos.setMaximumSize(new java.awt.Dimension(32767, 32767));
        photos.setMinimumSize(new java.awt.Dimension(167, 56));
        photos.setOpaque(false);
        photos.setVisibleRowCount(1);
        photos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                photosMouseClicked(evt);
            }
        });

        jScrollPane2.setViewportView(photos);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 175, Short.MAX_VALUE)
                        .add(jButton1)
                        .add(1, 1, 1))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel6)
                            .add(jLabel2)
                            .add(jLabel5)
                            .add(jLabel3))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, geoposition, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 131, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, name, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                                .add(title, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)))))
                .add(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(9, 9, 9)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel3)
                            .add(geoposition)))
                    .add(layout.createSequentialGroup()
                        .add(8, 8, 8)
                        .add(jButton1)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(name, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(title, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel5)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 76, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void photosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_photosMouseClicked
        Point cell = photos.indexToLocation(photos.getSelectedIndex());
        Point mouse = evt.getPoint();
        double offx = mouse.getX() - cell.getX();
        double offy = mouse.getY() - cell.getY();
        if(DELETE_ICON_BOUNDS.contains(offx,offy)) {
            PhotoWrapper photo = (PhotoWrapper)photos.getSelectedValue();
            waypoint.removePhoto(photo);
        }
    }//GEN-LAST:event_photosMouseClicked
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        final Container parent = this.getParent();
        waypoint.setName(name.getText());
        waypoint.setTitle(title.getText());
        waypoint.setSummary(summary.getText());
        Animator fadeOut = AnimationUtil.createFadeOutAnimation(this);
        fadeOut.addTarget(new TimingTarget() {
            public void begin() {}
            public void end() {
                parent.remove(WaypointEditPanel.this);
                parent.repaint();
            }
            public void timingEvent(float f) {}
            public void repeat(){}
        });
        fadeOut.start();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.sun.javaone.aerith.ui.AerithPanelPainter aerithPanelPainter1;
    private javax.swing.JLabel geoposition;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField name;
    private javax.swing.JList photos;
    private javax.swing.JTextArea summary;
    private javax.swing.JTextField title;
    // End of variables declaration//GEN-END:variables

    private static class WaypointPhotoListCellRenderer extends PhotoListCellRenderer {
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            
            Graphics2D g2 = (Graphics2D) g;
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
            double offx = DELETE_ICON_BOUNDS.getX()
                          + DELETE_ICON_BOUNDS.getWidth() / 2;
            double offy = DELETE_ICON_BOUNDS.getY()
                          + DELETE_ICON_BOUNDS.getHeight() / 2;
            g2.translate(offx, offy);
            g2.setColor(new Color(0,0,0));
            g2.fillOval(-5, -5, 10, 10);
            g2.setColor(new Color(200, 200, 200));
            g2.fillOval(-5, -5, 10, 10);
            g2.setColor(Color.DARK_GRAY);
            g2.drawLine(-2, -2, 2, 2);
            g2.drawLine(-2, 2, 2, -2);
            g2.translate(-offx, -offy);
            g2.dispose();
        }
    }

    private class PhotoListModel extends AbstractListModel {
        public PhotoListModel(Trip.Waypoint waypoint) {
            waypoint.addPropertyChangeListener(new PropertyChangeListener() {
                public void propertyChange(PropertyChangeEvent evt) {
                    fireContentsChanged(this,0,getSize());
                }
            });
        }
        public Object getElementAt(int index) {
            return waypoint.getPhoto(index);
        }
        public int getSize() {
            return waypoint.getPhotoCount();
        }
    }

    private class PhotoImportHandler extends TransferHandler {

        @Override
        public boolean canImport(JComponent comp, DataFlavor[] flavors) {
            for (DataFlavor flavor : flavors) {
                if (PhotoWrapperTransferable.FLICKR_FLAVOR.equals(flavor)) {
                    return true;
                }
            }
            return false;
        }

        @Override
        public boolean importData(JComponent comp, Transferable t) {
            try {
                for (DataFlavor flavor : t.getTransferDataFlavors()) {
                    if (PhotoWrapperTransferable.FLICKR_FLAVOR.equals(flavor)) {
                        PhotoWrapper photo = (PhotoWrapper) t.getTransferData(flavor);
                        WaypointEditPanel.this.waypoint.addPhoto(photo);
                        photos.ensureIndexIsVisible(photos.getModel().getSize());
                        return true;
                    }
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            return false;
        }
    }

    private class DropMe extends GradientViewport {
        private BufferedImage dropHere;
        
        private DropMe() {
            super(Color.BLACK, 40, Orientation.HORIZONTAL);
            try {
                dropHere = ImageIO.read(WaypointEditPanel.class.getResource("/resources/photos/drop-here.png"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            
            if (photos.getModel().getSize() > 0) {
                return;
            }
            
            Graphics2D g2 = (Graphics2D) g;

            int x = (getWidth() - dropHere.getWidth()) / 2;
            int y = (getHeight() - dropHere.getHeight()) / 2;
            g2.drawImage(dropHere, x, y, null);
        }
    }
}
